class BattleAuraApp{constructor(){this.config=null;this.ws=null;this.init()}
async init(){this.setupTabs();await this.loadConfig();this.connectWebSocket();this.updateStatus()}
setupTabs(){document.querySelectorAll('.tab-btn').forEach(btn=>{btn.onclick=()=>{document.querySelectorAll('.tab-btn').forEach(b=>b.classList.remove('active'));document.querySelectorAll('.tab-content').forEach(c=>c.classList.remove('active'));btn.classList.add('active');document.getElementById(btn.dataset.tab).classList.add('active')}})}
async loadConfig(){try{const response=await fetch('/api/config');this.config=await response.json();this.updateUI()}catch(e){this.showToast('Failed to load config','error')}}
updateUI(){if(!this.config)return;document.getElementById('version').textContent=this.config.firmwareVersion;document.getElementById('device-name').textContent=this.config.deviceName;document.getElementById('volume').value=this.config.defaultVolume;document.getElementById('brightness').value=this.config.defaultBrightness;document.getElementById('leds-enabled').checked=this.config.hasLEDs}
connectWebSocket(){const protocol=window.location.protocol==='https:'?'wss':'ws';this.ws=new WebSocket(`${protocol}://${window.location.host}/ws`);this.ws.onopen=()=>{document.getElementById('status-text').textContent='Connected';document.getElementById('status-indicator').className='status-indicator status-connected'};this.ws.onmessage=(event)=>{const data=JSON.parse(event.data);if(data.type==='config-updated')this.loadConfig();else if(data.type==='effect-started')this.showToast(`Effect: ${data.data.effectId}`,'success')};this.ws.onclose=()=>{document.getElementById('status-text').textContent='Disconnected';document.getElementById('status-indicator').className='status-indicator status-disconnected';setTimeout(()=>this.connectWebSocket(),5000)};this.ws.onerror=()=>document.getElementById('status-text').textContent='Error'}
async updateStatus(){try{const response=await fetch('/api/system/info');const data=await response.json();document.getElementById('firmware-version').textContent=data.firmwareVersion;document.getElementById('build-date').textContent=data.buildDate;document.getElementById('chip-model').textContent=data.chipModel;document.getElementById('flash-size').textContent=`${Math.round(data.flashSize/1024)}KB`;document.getElementById('uptime').textContent=`${Math.round(data.uptime/60)}m`;document.getElementById('free-heap').textContent=`${Math.round(data.freeHeap/1024)}KB`}catch(e){console.error('Status update failed',e)}}
async triggerEffect(effectId){try{const response=await fetch(`/api/trigger/${effectId}`,{method:'POST'});const result=await response.json();if(result.status==='success')this.showToast(`${effectId} triggered`,'success');else this.showToast(result.error||'Effect failed','error')}catch(e){this.showToast('Request failed','error')}}
async setVolume(value){try{await fetch('/api/config/volume',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:`volume=${value}`})}catch(e){this.showToast('Volume update failed','error')}}
async setBrightness(value){try{await fetch('/api/config/brightness',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:`brightness=${value}`})}catch(e){this.showToast('Brightness update failed','error')}}
async toggleLEDs(enabled){try{await fetch('/api/config/leds',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:`enabled=${enabled}`})}catch(e){this.showToast('LEDs toggle failed','error')}}
async factoryReset(){if(confirm('Factory reset will erase all settings. Continue?')){try{await fetch('/api/system/factory-reset',{method:'POST'});this.showToast('Factory reset initiated','success')}catch(e){this.showToast('Reset failed','error')}}}
showToast(message,type='success'){const toast=document.getElementById('toast');const content=document.getElementById('toast-content');content.textContent=message;toast.className=`toast toast-${type} show`;setTimeout(()=>toast.classList.remove('show'),3000)}}
const app=new BattleAuraApp();setInterval(()=>app.updateStatus(),30000);